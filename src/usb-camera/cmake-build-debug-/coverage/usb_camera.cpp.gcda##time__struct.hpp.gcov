        -:    0:Source:/opt/ros/humble/include/builtin_interfaces/builtin_interfaces/msg/detail/time__struct.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// generated from rosidl_generator_cpp/resource/idl__struct.hpp.em
        -:    2:// with input from builtin_interfaces:msg/Time.idl
        -:    3:// generated code does not contain a copyright notice
        -:    4:
        -:    5:#ifndef BUILTIN_INTERFACES__MSG__DETAIL__TIME__STRUCT_HPP_
        -:    6:#define BUILTIN_INTERFACES__MSG__DETAIL__TIME__STRUCT_HPP_
        -:    7:
        -:    8:#include <algorithm>
        -:    9:#include <array>
        -:   10:#include <memory>
        -:   11:#include <string>
        -:   12:#include <vector>
        -:   13:
        -:   14:#include "rosidl_runtime_cpp/bounded_vector.hpp"
        -:   15:#include "rosidl_runtime_cpp/message_initialization.hpp"
        -:   16:
        -:   17:
        -:   18:#ifndef _WIN32
        -:   19:# define DEPRECATED__builtin_interfaces__msg__Time __attribute__((deprecated))
        -:   20:#else
        -:   21:# define DEPRECATED__builtin_interfaces__msg__Time __declspec(deprecated)
        -:   22:#endif
        -:   23:
        -:   24:namespace builtin_interfaces
        -:   25:{
        -:   26:
        -:   27:namespace msg
        -:   28:{
        -:   29:
        -:   30:// message struct
        -:   31:template<class ContainerAllocator>
        -:   32:struct Time_
        -:   33:{
        -:   34:  using Type = Time_<ContainerAllocator>;
        -:   35:
function _ZN18builtin_interfaces3msg5Time_ISaIvEEC2EN18rosidl_runtime_cpp21MessageInitializationE called 102 returned 100% blocks executed 75%
      102:   36:  explicit Time_(rosidl_runtime_cpp::MessageInitialization _init = rosidl_runtime_cpp::MessageInitialization::ALL)
        -:   37:  {
     102*:   38:    if (rosidl_runtime_cpp::MessageInitialization::ALL == _init ||
      102:   38-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 102
    %%%%%:   38-block  1
branch  2 never executed
branch  3 never executed
        -:   39:      rosidl_runtime_cpp::MessageInitialization::ZERO == _init)
        -:   40:    {
      102:   41:      this->sec = 0l;
      102:   42:      this->nanosec = 0ul;
      102:   42-block  0
        -:   43:    }
      102:   44:  }
        -:   45:
        -:   46:  explicit Time_(const ContainerAllocator & _alloc, rosidl_runtime_cpp::MessageInitialization _init = rosidl_runtime_cpp::MessageInitialization::ALL)
        -:   47:  {
        -:   48:    (void)_alloc;
        -:   49:    if (rosidl_runtime_cpp::MessageInitialization::ALL == _init ||
        -:   50:      rosidl_runtime_cpp::MessageInitialization::ZERO == _init)
        -:   51:    {
        -:   52:      this->sec = 0l;
        -:   53:      this->nanosec = 0ul;
        -:   54:    }
        -:   55:  }
        -:   56:
        -:   57:  // field types and members
        -:   58:  using _sec_type =
        -:   59:    int32_t;
        -:   60:  _sec_type sec;
        -:   61:  using _nanosec_type =
        -:   62:    uint32_t;
        -:   63:  _nanosec_type nanosec;
        -:   64:
        -:   65:  // setters for named parameter idiom
        -:   66:  Type & set__sec(
        -:   67:    const int32_t & _arg)
        -:   68:  {
        -:   69:    this->sec = _arg;
        -:   70:    return *this;
        -:   71:  }
        -:   72:  Type & set__nanosec(
        -:   73:    const uint32_t & _arg)
        -:   74:  {
        -:   75:    this->nanosec = _arg;
        -:   76:    return *this;
        -:   77:  }
        -:   78:
        -:   79:  // constant declarations
        -:   80:
        -:   81:  // pointer types
        -:   82:  using RawPtr =
        -:   83:    builtin_interfaces::msg::Time_<ContainerAllocator> *;
        -:   84:  using ConstRawPtr =
        -:   85:    const builtin_interfaces::msg::Time_<ContainerAllocator> *;
        -:   86:  using SharedPtr =
        -:   87:    std::shared_ptr<builtin_interfaces::msg::Time_<ContainerAllocator>>;
        -:   88:  using ConstSharedPtr =
        -:   89:    std::shared_ptr<builtin_interfaces::msg::Time_<ContainerAllocator> const>;
        -:   90:
        -:   91:  template<typename Deleter = std::default_delete<
        -:   92:      builtin_interfaces::msg::Time_<ContainerAllocator>>>
        -:   93:  using UniquePtrWithDeleter =
        -:   94:    std::unique_ptr<builtin_interfaces::msg::Time_<ContainerAllocator>, Deleter>;
        -:   95:
        -:   96:  using UniquePtr = UniquePtrWithDeleter<>;
        -:   97:
        -:   98:  template<typename Deleter = std::default_delete<
        -:   99:      builtin_interfaces::msg::Time_<ContainerAllocator>>>
        -:  100:  using ConstUniquePtrWithDeleter =
        -:  101:    std::unique_ptr<builtin_interfaces::msg::Time_<ContainerAllocator> const, Deleter>;
        -:  102:  using ConstUniquePtr = ConstUniquePtrWithDeleter<>;
        -:  103:
        -:  104:  using WeakPtr =
        -:  105:    std::weak_ptr<builtin_interfaces::msg::Time_<ContainerAllocator>>;
        -:  106:  using ConstWeakPtr =
        -:  107:    std::weak_ptr<builtin_interfaces::msg::Time_<ContainerAllocator> const>;
        -:  108:
        -:  109:  // pointer types similar to ROS 1, use SharedPtr / ConstSharedPtr instead
        -:  110:  // NOTE: Can't use 'using' here because GNU C++ can't parse attributes properly
        -:  111:  typedef DEPRECATED__builtin_interfaces__msg__Time
        -:  112:    std::shared_ptr<builtin_interfaces::msg::Time_<ContainerAllocator>>
        -:  113:    Ptr;
        -:  114:  typedef DEPRECATED__builtin_interfaces__msg__Time
        -:  115:    std::shared_ptr<builtin_interfaces::msg::Time_<ContainerAllocator> const>
        -:  116:    ConstPtr;
        -:  117:
        -:  118:  // comparison operators
        -:  119:  bool operator==(const Time_ & other) const
        -:  120:  {
        -:  121:    if (this->sec != other.sec) {
        -:  122:      return false;
        -:  123:    }
        -:  124:    if (this->nanosec != other.nanosec) {
        -:  125:      return false;
        -:  126:    }
        -:  127:    return true;
        -:  128:  }
        -:  129:  bool operator!=(const Time_ & other) const
        -:  130:  {
        -:  131:    return !this->operator==(other);
        -:  132:  }
        -:  133:};  // struct Time_
        -:  134:
        -:  135:// alias to use template instance with default allocator
        -:  136:using Time =
        -:  137:  builtin_interfaces::msg::Time_<std::allocator<void>>;
        -:  138:
        -:  139:// constant definitions
        -:  140:
        -:  141:}  // namespace msg
        -:  142:
        -:  143:}  // namespace builtin_interfaces
        -:  144:
        -:  145:#endif  // BUILTIN_INTERFACES__MSG__DETAIL__TIME__STRUCT_HPP_
