        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/publisher_factory.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2016 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__PUBLISHER_FACTORY_HPP_
        -:   16:#define RCLCPP__PUBLISHER_FACTORY_HPP_
        -:   17:
        -:   18:#include <functional>
        -:   19:#include <memory>
        -:   20:#include <string>
        -:   21:
        -:   22:#include "rcl/publisher.h"
        -:   23:
        -:   24:#include "rosidl_typesupport_cpp/message_type_support.hpp"
        -:   25:
        -:   26:#include "rclcpp/publisher.hpp"
        -:   27:#include "rclcpp/publisher_base.hpp"
        -:   28:#include "rclcpp/publisher_options.hpp"
        -:   29:#include "rclcpp/node_interfaces/node_base_interface.hpp"
        -:   30:#include "rclcpp/qos.hpp"
        -:   31:#include "rclcpp/visibility_control.hpp"
        -:   32:
        -:   33:namespace rclcpp
        -:   34:{
        -:   35:
        -:   36:/// Factory with functions used to create a MessageT specific PublisherT.
        -:   37:/**
        -:   38: * This factory class is used to encapsulate the template generated functions
        -:   39: * which are used during the creation of a Message type specific publisher
        -:   40: * within a non-templated class.
        -:   41: *
        -:   42: * It is created using the create_publisher_factory function, which is usually
        -:   43: * called from a templated "create_publisher" method on the Node class, and
        -:   44: * is passed to the non-templated "create_publisher" method on the NodeTopics
        -:   45: * class where it is used to create and setup the Publisher.
        -:   46: *
        -:   47: * It also handles the two step construction of Publishers, first calling
        -:   48: * the constructor and then the post_init_setup() method.
        -:   49: */
        -:   50:struct PublisherFactory
        -:   51:{
        -:   52:  // Creates a PublisherT<MessageT, ...> publisher object and returns it as a PublisherBase.
        -:   53:  using PublisherFactoryFunction = std::function<
        -:   54:    rclcpp::PublisherBase::SharedPtr(
        -:   55:      rclcpp::node_interfaces::NodeBaseInterface * node_base,
        -:   56:      const std::string & topic_name,
        -:   57:      const rclcpp::QoS & qos
        -:   58:    )>;
        -:   59:
        -:   60:  const PublisherFactoryFunction create_typed_publisher;
        -:   61:};
        -:   62:
        -:   63:/// Return a PublisherFactory with functions setup for creating a PublisherT<MessageT, AllocatorT>.
        -:   64:template<typename MessageT, typename AllocatorT, typename PublisherT>
        -:   65:PublisherFactory
        2:   66:create_publisher_factory(const rclcpp::PublisherOptionsWithAllocator<AllocatorT> & options)
        -:   67:{
        2:   68:  PublisherFactory factory {
        -:   69:    // factory function that creates a MessageT specific PublisherT
        2:   70:    [options](
        -:   71:      rclcpp::node_interfaces::NodeBaseInterface * node_base,
        -:   72:      const std::string & topic_name,
        -:   73:      const rclcpp::QoS & qos
        -:   74:    ) -> std::shared_ptr<PublisherT>
        -:   75:    {
        2:   76:      auto publisher = std::make_shared<PublisherT>(node_base, topic_name, qos, options);
        1:   76-block  0
call    0 returned 1
        1:   76-block  1
call    1 returned 1
        -:   77:      // This is used for setting up things like intra process comms which
        -:   78:      // require this->shared_from_this() which cannot be called from
        -:   79:      // the constructor.
        2:   80:      publisher->post_init_setup(node_base, topic_name, qos, options);
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        2:   81:      return publisher;
        1:   81-block  0
        1:   81-block  1
        1:   81-block  2
        1:   81-block  3
    =====:   82:    }
    $$$$$:   82-block  0
call    0 never executed
    $$$$$:   82-block  1
call    1 never executed
        -:   83:  };
        -:   84:
        -:   85:  // return the factory now that it is populated
        2:   86:  return factory;
        -:   87:}
        -:   88:
        -:   89:}  // namespace rclcpp
        -:   90:
        -:   91:#endif  // RCLCPP__PUBLISHER_FACTORY_HPP_
