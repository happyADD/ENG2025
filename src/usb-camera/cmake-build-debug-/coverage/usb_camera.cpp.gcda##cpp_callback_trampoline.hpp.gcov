        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/detail/cpp_callback_trampoline.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2021 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__DETAIL__CPP_CALLBACK_TRAMPOLINE_HPP_
        -:   16:#define RCLCPP__DETAIL__CPP_CALLBACK_TRAMPOLINE_HPP_
        -:   17:
        -:   18:#include <functional>
        -:   19:
        -:   20:namespace rclcpp
        -:   21:{
        -:   22:
        -:   23:namespace detail
        -:   24:{
        -:   25:
        -:   26:/// Trampoline pattern for wrapping std::function into C-style callbacks.
        -:   27:/**
        -:   28: * A common pattern in C is for a function to take a function pointer and a
        -:   29: * void pointer for "user data" which is passed to the function pointer when it
        -:   30: * is called from within C.
        -:   31: *
        -:   32: * It works by using the user data pointer to store a pointer to a
        -:   33: * std::function instance.
        -:   34: * So when called from C, this function will cast the user data to the right
        -:   35: * std::function type and call it.
        -:   36: *
        -:   37: * This should allow you to use free functions, lambdas with and without
        -:   38: * captures, and various kinds of std::bind instances.
        -:   39: *
        -:   40: * The interior of this function is likely to be executed within a C runtime,
        -:   41: * so no exceptions should be thrown at this point, and doing so results in
        -:   42: * undefined behavior.
        -:   43: *
        -:   44: * \tparam UserDataT Deduced type based on what is passed for user data,
        -:   45: *   usually this type is either `void *` or `const void *`.
        -:   46: * \tparam Args the arguments being passed to the callback
        -:   47: * \tparam ReturnT the return type of this function and the callback, default void
        -:   48: * \param user_data the function pointer, possibly type erased
        -:   49: * \param args the arguments to be forwarded to the callback
        -:   50: * \returns whatever the callback returns, if anything
        -:   51: */
        -:   52:template<
        -:   53:  typename UserDataT,
        -:   54:  typename ... Args,
        -:   55:  typename ReturnT = void
        -:   56:>
        -:   57:ReturnT
function _ZN6rclcpp6detail23cpp_callback_trampolineIPKvJmEvEET1_T_DpT0_ called 0 returned 0% blocks executed 0%
    #####:   58:cpp_callback_trampoline(UserDataT user_data, Args ... args) noexcept
        -:   59:{
    #####:   60:  auto & actual_callback = *reinterpret_cast<const std::function<ReturnT(Args...)> *>(user_data);
    #####:   61:  return actual_callback(args ...);
    %%%%%:   61-block  0
call    0 never executed
        -:   62:}
        -:   63:
        -:   64:}  // namespace detail
        -:   65:
        -:   66:}  // namespace rclcpp
        -:   67:
        -:   68:#endif  // RCLCPP__DETAIL__CPP_CALLBACK_TRAMPOLINE_HPP_
