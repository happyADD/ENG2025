        -:    0:Source:/opt/ros/humble/include/sensor_msgs/sensor_msgs/msg/detail/camera_info__struct.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// generated from rosidl_generator_cpp/resource/idl__struct.hpp.em
        -:    2:// with input from sensor_msgs:msg/CameraInfo.idl
        -:    3:// generated code does not contain a copyright notice
        -:    4:
        -:    5:#ifndef SENSOR_MSGS__MSG__DETAIL__CAMERA_INFO__STRUCT_HPP_
        -:    6:#define SENSOR_MSGS__MSG__DETAIL__CAMERA_INFO__STRUCT_HPP_
        -:    7:
        -:    8:#include <algorithm>
        -:    9:#include <array>
        -:   10:#include <memory>
        -:   11:#include <string>
        -:   12:#include <vector>
        -:   13:
        -:   14:#include "rosidl_runtime_cpp/bounded_vector.hpp"
        -:   15:#include "rosidl_runtime_cpp/message_initialization.hpp"
        -:   16:
        -:   17:
        -:   18:// Include directives for member types
        -:   19:// Member 'header'
        -:   20:#include "std_msgs/msg/detail/header__struct.hpp"
        -:   21:// Member 'roi'
        -:   22:#include "sensor_msgs/msg/detail/region_of_interest__struct.hpp"
        -:   23:
        -:   24:#ifndef _WIN32
        -:   25:# define DEPRECATED__sensor_msgs__msg__CameraInfo __attribute__((deprecated))
        -:   26:#else
        -:   27:# define DEPRECATED__sensor_msgs__msg__CameraInfo __declspec(deprecated)
        -:   28:#endif
        -:   29:
        -:   30:namespace sensor_msgs
        -:   31:{
        -:   32:
        -:   33:namespace msg
        -:   34:{
        -:   35:
        -:   36:// message struct
        -:   37:template<class ContainerAllocator>
        -:   38:struct CameraInfo_
        -:   39:{
        -:   40:  using Type = CameraInfo_<ContainerAllocator>;
        -:   41:
function _ZN11sensor_msgs3msg11CameraInfo_ISaIvEEC2EN18rosidl_runtime_cpp21MessageInitializationE called 34 returned 100% blocks executed 67%
       34:   42:  explicit CameraInfo_(rosidl_runtime_cpp::MessageInitialization _init = rosidl_runtime_cpp::MessageInitialization::ALL)
       34:   43:  : header(_init),
       34:   43-block  0
call    0 returned 34
       34:   44:    roi(_init)
call    0 returned 34
call    1 returned 34
call    2 returned 34
        -:   45:  {
      34*:   46:    if (rosidl_runtime_cpp::MessageInitialization::ALL == _init ||
branch  0 taken 0 (fallthrough)
branch  1 taken 34
    %%%%%:   46-block  0
branch  2 never executed
branch  3 never executed
        -:   47:      rosidl_runtime_cpp::MessageInitialization::ZERO == _init)
        -:   48:    {
       34:   49:      this->height = 0ul;
       34:   50:      this->width = 0ul;
       34:   51:      this->distortion_model = "";
       34:   51-block  0
call    0 returned 34
branch  1 taken 34 (fallthrough)
branch  2 taken 0 (throw)
       34:   52:      std::fill<typename std::array<double, 9>::iterator, double>(this->k.begin(), this->k.end(), 0.0);
       34:   52-block  0
call    0 returned 34
call    1 returned 34
call    2 returned 34
branch  3 taken 34 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:   52-block  1
       34:   53:      std::fill<typename std::array<double, 9>::iterator, double>(this->r.begin(), this->r.end(), 0.0);
       34:   53-block  0
call    0 returned 34
call    1 returned 34
call    2 returned 34
branch  3 taken 34 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:   53-block  1
       34:   54:      std::fill<typename std::array<double, 12>::iterator, double>(this->p.begin(), this->p.end(), 0.0);
       34:   54-block  0
call    0 returned 34
call    1 returned 34
call    2 returned 34
branch  3 taken 34 (fallthrough)
branch  4 taken 0 (throw)
    $$$$$:   54-block  1
       34:   55:      this->binning_x = 0ul;
       34:   56:      this->binning_y = 0ul;
       34:   56-block  0
        -:   57:    }
       34:   58:  }
       34:   58-block  0
    $$$$$:   58-block  1
call    0 never executed
    $$$$$:   58-block  2
call    1 never executed
    $$$$$:   58-block  3
call    2 never executed
        -:   59:
        -:   60:  explicit CameraInfo_(const ContainerAllocator & _alloc, rosidl_runtime_cpp::MessageInitialization _init = rosidl_runtime_cpp::MessageInitialization::ALL)
        -:   61:  : header(_alloc, _init),
        -:   62:    distortion_model(_alloc),
        -:   63:    k(_alloc),
        -:   64:    r(_alloc),
        -:   65:    p(_alloc),
        -:   66:    roi(_alloc, _init)
        -:   67:  {
        -:   68:    if (rosidl_runtime_cpp::MessageInitialization::ALL == _init ||
        -:   69:      rosidl_runtime_cpp::MessageInitialization::ZERO == _init)
        -:   70:    {
        -:   71:      this->height = 0ul;
        -:   72:      this->width = 0ul;
        -:   73:      this->distortion_model = "";
        -:   74:      std::fill<typename std::array<double, 9>::iterator, double>(this->k.begin(), this->k.end(), 0.0);
        -:   75:      std::fill<typename std::array<double, 9>::iterator, double>(this->r.begin(), this->r.end(), 0.0);
        -:   76:      std::fill<typename std::array<double, 12>::iterator, double>(this->p.begin(), this->p.end(), 0.0);
        -:   77:      this->binning_x = 0ul;
        -:   78:      this->binning_y = 0ul;
        -:   79:    }
        -:   80:  }
        -:   81:
        -:   82:  // field types and members
        -:   83:  using _header_type =
        -:   84:    std_msgs::msg::Header_<ContainerAllocator>;
        -:   85:  _header_type header;
        -:   86:  using _height_type =
        -:   87:    uint32_t;
        -:   88:  _height_type height;
        -:   89:  using _width_type =
        -:   90:    uint32_t;
        -:   91:  _width_type width;
        -:   92:  using _distortion_model_type =
        -:   93:    std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>;
        -:   94:  _distortion_model_type distortion_model;
        -:   95:  using _d_type =
        -:   96:    std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>>;
        -:   97:  _d_type d;
        -:   98:  using _k_type =
        -:   99:    std::array<double, 9>;
        -:  100:  _k_type k;
        -:  101:  using _r_type =
        -:  102:    std::array<double, 9>;
        -:  103:  _r_type r;
        -:  104:  using _p_type =
        -:  105:    std::array<double, 12>;
        -:  106:  _p_type p;
        -:  107:  using _binning_x_type =
        -:  108:    uint32_t;
        -:  109:  _binning_x_type binning_x;
        -:  110:  using _binning_y_type =
        -:  111:    uint32_t;
        -:  112:  _binning_y_type binning_y;
        -:  113:  using _roi_type =
        -:  114:    sensor_msgs::msg::RegionOfInterest_<ContainerAllocator>;
        -:  115:  _roi_type roi;
        -:  116:
        -:  117:  // setters for named parameter idiom
        -:  118:  Type & set__header(
        -:  119:    const std_msgs::msg::Header_<ContainerAllocator> & _arg)
        -:  120:  {
        -:  121:    this->header = _arg;
        -:  122:    return *this;
        -:  123:  }
        -:  124:  Type & set__height(
        -:  125:    const uint32_t & _arg)
        -:  126:  {
        -:  127:    this->height = _arg;
        -:  128:    return *this;
        -:  129:  }
        -:  130:  Type & set__width(
        -:  131:    const uint32_t & _arg)
        -:  132:  {
        -:  133:    this->width = _arg;
        -:  134:    return *this;
        -:  135:  }
        -:  136:  Type & set__distortion_model(
        -:  137:    const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> & _arg)
        -:  138:  {
        -:  139:    this->distortion_model = _arg;
        -:  140:    return *this;
        -:  141:  }
        -:  142:  Type & set__d(
        -:  143:    const std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> & _arg)
        -:  144:  {
        -:  145:    this->d = _arg;
        -:  146:    return *this;
        -:  147:  }
        -:  148:  Type & set__k(
        -:  149:    const std::array<double, 9> & _arg)
        -:  150:  {
        -:  151:    this->k = _arg;
        -:  152:    return *this;
        -:  153:  }
        -:  154:  Type & set__r(
        -:  155:    const std::array<double, 9> & _arg)
        -:  156:  {
        -:  157:    this->r = _arg;
        -:  158:    return *this;
        -:  159:  }
        -:  160:  Type & set__p(
        -:  161:    const std::array<double, 12> & _arg)
        -:  162:  {
        -:  163:    this->p = _arg;
        -:  164:    return *this;
        -:  165:  }
        -:  166:  Type & set__binning_x(
        -:  167:    const uint32_t & _arg)
        -:  168:  {
        -:  169:    this->binning_x = _arg;
        -:  170:    return *this;
        -:  171:  }
        -:  172:  Type & set__binning_y(
        -:  173:    const uint32_t & _arg)
        -:  174:  {
        -:  175:    this->binning_y = _arg;
        -:  176:    return *this;
        -:  177:  }
        -:  178:  Type & set__roi(
        -:  179:    const sensor_msgs::msg::RegionOfInterest_<ContainerAllocator> & _arg)
        -:  180:  {
        -:  181:    this->roi = _arg;
        -:  182:    return *this;
        -:  183:  }
        -:  184:
        -:  185:  // constant declarations
        -:  186:
        -:  187:  // pointer types
        -:  188:  using RawPtr =
        -:  189:    sensor_msgs::msg::CameraInfo_<ContainerAllocator> *;
        -:  190:  using ConstRawPtr =
        -:  191:    const sensor_msgs::msg::CameraInfo_<ContainerAllocator> *;
        -:  192:  using SharedPtr =
        -:  193:    std::shared_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator>>;
        -:  194:  using ConstSharedPtr =
        -:  195:    std::shared_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator> const>;
        -:  196:
        -:  197:  template<typename Deleter = std::default_delete<
        -:  198:      sensor_msgs::msg::CameraInfo_<ContainerAllocator>>>
        -:  199:  using UniquePtrWithDeleter =
        -:  200:    std::unique_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator>, Deleter>;
        -:  201:
        -:  202:  using UniquePtr = UniquePtrWithDeleter<>;
        -:  203:
        -:  204:  template<typename Deleter = std::default_delete<
        -:  205:      sensor_msgs::msg::CameraInfo_<ContainerAllocator>>>
        -:  206:  using ConstUniquePtrWithDeleter =
        -:  207:    std::unique_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator> const, Deleter>;
        -:  208:  using ConstUniquePtr = ConstUniquePtrWithDeleter<>;
        -:  209:
        -:  210:  using WeakPtr =
        -:  211:    std::weak_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator>>;
        -:  212:  using ConstWeakPtr =
        -:  213:    std::weak_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator> const>;
        -:  214:
        -:  215:  // pointer types similar to ROS 1, use SharedPtr / ConstSharedPtr instead
        -:  216:  // NOTE: Can't use 'using' here because GNU C++ can't parse attributes properly
        -:  217:  typedef DEPRECATED__sensor_msgs__msg__CameraInfo
        -:  218:    std::shared_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator>>
        -:  219:    Ptr;
        -:  220:  typedef DEPRECATED__sensor_msgs__msg__CameraInfo
        -:  221:    std::shared_ptr<sensor_msgs::msg::CameraInfo_<ContainerAllocator> const>
        -:  222:    ConstPtr;
        -:  223:
        -:  224:  // comparison operators
        -:  225:  bool operator==(const CameraInfo_ & other) const
        -:  226:  {
        -:  227:    if (this->header != other.header) {
        -:  228:      return false;
        -:  229:    }
        -:  230:    if (this->height != other.height) {
        -:  231:      return false;
        -:  232:    }
        -:  233:    if (this->width != other.width) {
        -:  234:      return false;
        -:  235:    }
        -:  236:    if (this->distortion_model != other.distortion_model) {
        -:  237:      return false;
        -:  238:    }
        -:  239:    if (this->d != other.d) {
        -:  240:      return false;
        -:  241:    }
        -:  242:    if (this->k != other.k) {
        -:  243:      return false;
        -:  244:    }
        -:  245:    if (this->r != other.r) {
        -:  246:      return false;
        -:  247:    }
        -:  248:    if (this->p != other.p) {
        -:  249:      return false;
        -:  250:    }
        -:  251:    if (this->binning_x != other.binning_x) {
        -:  252:      return false;
        -:  253:    }
        -:  254:    if (this->binning_y != other.binning_y) {
        -:  255:      return false;
        -:  256:    }
        -:  257:    if (this->roi != other.roi) {
        -:  258:      return false;
        -:  259:    }
        -:  260:    return true;
        -:  261:  }
        -:  262:  bool operator!=(const CameraInfo_ & other) const
        -:  263:  {
        -:  264:    return !this->operator==(other);
        -:  265:  }
        -:  266:};  // struct CameraInfo_
        -:  267:
        -:  268:// alias to use template instance with default allocator
        -:  269:using CameraInfo =
        -:  270:  sensor_msgs::msg::CameraInfo_<std::allocator<void>>;
        -:  271:
        -:  272:// constant definitions
        -:  273:
        -:  274:}  // namespace msg
        -:  275:
        -:  276:}  // namespace sensor_msgs
        -:  277:
        -:  278:#endif  // SENSOR_MSGS__MSG__DETAIL__CAMERA_INFO__STRUCT_HPP_
