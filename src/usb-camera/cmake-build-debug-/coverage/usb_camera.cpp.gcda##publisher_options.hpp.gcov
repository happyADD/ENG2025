        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/publisher_options.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2019 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__PUBLISHER_OPTIONS_HPP_
        -:   16:#define RCLCPP__PUBLISHER_OPTIONS_HPP_
        -:   17:
        -:   18:#include <memory>
        -:   19:#include <string>
        -:   20:#include <type_traits>
        -:   21:#include <vector>
        -:   22:
        -:   23:#include "rcl/publisher.h"
        -:   24:
        -:   25:#include "rclcpp/allocator/allocator_common.hpp"
        -:   26:#include "rclcpp/detail/rmw_implementation_specific_publisher_payload.hpp"
        -:   27:#include "rclcpp/intra_process_setting.hpp"
        -:   28:#include "rclcpp/qos.hpp"
        -:   29:#include "rclcpp/qos_event.hpp"
        -:   30:#include "rclcpp/qos_overriding_options.hpp"
        -:   31:
        -:   32:namespace rclcpp
        -:   33:{
        -:   34:
        -:   35:class CallbackGroup;
        -:   36:
        -:   37:/// Non-templated part of PublisherOptionsWithAllocator<Allocator>.
        -:   38:struct PublisherOptionsBase
        -:   39:{
        -:   40:  /// Setting to explicitly set intraprocess communications.
        -:   41:  IntraProcessSetting use_intra_process_comm = IntraProcessSetting::NodeDefault;
        -:   42:
        -:   43:  /// Callbacks for various events related to publishers.
        -:   44:  PublisherEventCallbacks event_callbacks;
        -:   45:
        -:   46:  /// Whether or not to use default callbacks when user doesn't supply any in event_callbacks
        -:   47:  bool use_default_callbacks = true;
        -:   48:
        -:   49:  /// Require middleware to generate unique network flow endpoints
        -:   50:  /// Disabled by default
        -:   51:  rmw_unique_network_flow_endpoints_requirement_t require_unique_network_flow_endpoints =
        -:   52:    RMW_UNIQUE_NETWORK_FLOW_ENDPOINTS_NOT_REQUIRED;
        -:   53:
        -:   54:  /// Callback group in which the waitable items from the publisher should be placed.
        -:   55:  std::shared_ptr<rclcpp::CallbackGroup> callback_group;
        -:   56:
        -:   57:  /// Optional RMW implementation specific payload to be used during creation of the publisher.
        -:   58:  std::shared_ptr<rclcpp::detail::RMWImplementationSpecificPublisherPayload>
        -:   59:  rmw_implementation_payload = nullptr;
        -:   60:
        -:   61:  QosOverridingOptions qos_overriding_options;
        -:   62:};
        -:   63:
        -:   64:/// Structure containing optional configuration for Publishers.
        -:   65:template<typename Allocator>
        -:   66:struct PublisherOptionsWithAllocator : public PublisherOptionsBase
        -:   67:{
        -:   68:  static_assert(
        -:   69:    std::is_void_v<typename std::allocator_traits<Allocator>::value_type>,
        -:   70:    "Publisher allocator value type must be void");
        -:   71:
        -:   72:  /// Optional custom allocator.
        -:   73:  std::shared_ptr<Allocator> allocator = nullptr;
        -:   74:
function _ZN6rclcpp29PublisherOptionsWithAllocatorISaIvEEC2Ev called 2 returned 100% blocks executed 100%
        2:   75:  PublisherOptionsWithAllocator() {}
        2:   75-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
call    3 returned 2
        -:   76:
        -:   77:  /// Constructor using base class as input.
        -:   78:  explicit PublisherOptionsWithAllocator(const PublisherOptionsBase & publisher_options_base)
        -:   79:  : PublisherOptionsBase(publisher_options_base)
        -:   80:  {}
        -:   81:
        -:   82:  /// Convert this class, and a rclcpp::QoS, into an rcl_publisher_options_t.
        -:   83:  template<typename MessageT>
        -:   84:  rcl_publisher_options_t
        2:   85:  to_rcl_publisher_options(const rclcpp::QoS & qos) const
        -:   86:  {
        2:   87:    rcl_publisher_options_t result = rcl_publisher_get_default_options();
        2:   88:    result.allocator = this->get_rcl_allocator();
        2:   89:    result.qos = qos.get_rmw_qos_profile();
        2:   90:    result.rmw_publisher_options.require_unique_network_flow_endpoints =
        2:   91:      this->require_unique_network_flow_endpoints;
        -:   92:
        -:   93:    // Apply payload to rcl_publisher_options if necessary.
       2*:   94:    if (rmw_implementation_payload && rmw_implementation_payload->has_been_customized()) {
    #####:   95:      rmw_implementation_payload->modify_rmw_publisher_options(result.rmw_publisher_options);
        -:   96:    }
        -:   97:
        2:   98:    return result;
        -:   99:  }
------------------
_ZNK6rclcpp29PublisherOptionsWithAllocatorISaIvEE24to_rcl_publisher_optionsIN11sensor_msgs3msg11CameraInfo_IS1_EEEE23rcl_publisher_options_sRKNS_3QoSE:
function _ZNK6rclcpp29PublisherOptionsWithAllocatorISaIvEE24to_rcl_publisher_optionsIN11sensor_msgs3msg11CameraInfo_IS1_EEEE23rcl_publisher_options_sRKNS_3QoSE called 1 returned 100% blocks executed 60%
        1:   85:  to_rcl_publisher_options(const rclcpp::QoS & qos) const
        -:   86:  {
        1:   87:    rcl_publisher_options_t result = rcl_publisher_get_default_options();
        1:   87-block  0
call    0 returned 1
        1:   88:    result.allocator = this->get_rcl_allocator();
call    0 returned 1
        1:   89:    result.qos = qos.get_rmw_qos_profile();
call    0 returned 1
        1:   90:    result.rmw_publisher_options.require_unique_network_flow_endpoints =
        1:   91:      this->require_unique_network_flow_endpoints;
        -:   92:
        -:   93:    // Apply payload to rcl_publisher_options if necessary.
       1*:   94:    if (rmw_implementation_payload && rmw_implementation_payload->has_been_customized()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   94-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   94-block  1
        1:   94-block  2
        1:   94-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    #####:   95:      rmw_implementation_payload->modify_rmw_publisher_options(result.rmw_publisher_options);
    %%%%%:   95-block  0
call    0 never executed
call    1 never executed
        -:   96:    }
        -:   97:
        1:   98:    return result;
        1:   98-block  0
        -:   99:  }
------------------
_ZNK6rclcpp29PublisherOptionsWithAllocatorISaIvEE24to_rcl_publisher_optionsIN11sensor_msgs3msg6Image_IS1_EEEE23rcl_publisher_options_sRKNS_3QoSE:
function _ZNK6rclcpp29PublisherOptionsWithAllocatorISaIvEE24to_rcl_publisher_optionsIN11sensor_msgs3msg6Image_IS1_EEEE23rcl_publisher_options_sRKNS_3QoSE called 1 returned 100% blocks executed 60%
        1:   85:  to_rcl_publisher_options(const rclcpp::QoS & qos) const
        -:   86:  {
        1:   87:    rcl_publisher_options_t result = rcl_publisher_get_default_options();
        1:   87-block  0
call    0 returned 1
        1:   88:    result.allocator = this->get_rcl_allocator();
call    0 returned 1
        1:   89:    result.qos = qos.get_rmw_qos_profile();
call    0 returned 1
        1:   90:    result.rmw_publisher_options.require_unique_network_flow_endpoints =
        1:   91:      this->require_unique_network_flow_endpoints;
        -:   92:
        -:   93:    // Apply payload to rcl_publisher_options if necessary.
       1*:   94:    if (rmw_implementation_payload && rmw_implementation_payload->has_been_customized()) {
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   94-block  0
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    %%%%%:   94-block  1
        1:   94-block  2
        1:   94-block  3
branch  7 taken 0 (fallthrough)
branch  8 taken 1
    #####:   95:      rmw_implementation_payload->modify_rmw_publisher_options(result.rmw_publisher_options);
    %%%%%:   95-block  0
call    0 never executed
call    1 never executed
        -:   96:    }
        -:   97:
        1:   98:    return result;
        1:   98-block  0
        -:   99:  }
------------------
        -:  100:
        -:  101:
        -:  102:  /// Get the allocator, creating one if needed.
        -:  103:  std::shared_ptr<Allocator>
function _ZNK6rclcpp29PublisherOptionsWithAllocatorISaIvEE13get_allocatorEv called 6 returned 100% blocks executed 91%
        6:  104:  get_allocator() const
        -:  105:  {
        6:  106:    if (!this->allocator) {
        6:  106-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0
        6:  107:      if (!allocator_storage_) {
        6:  107-block  0
call    0 returned 6
branch  1 taken 2 (fallthrough)
branch  2 taken 4
        2:  108:        allocator_storage_ = std::make_shared<Allocator>();
        2:  108-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  109:      }
        6:  110:      return allocator_storage_;
        6:  110-block  0
call    0 returned 6
        -:  111:    }
    #####:  112:    return this->allocator;
    %%%%%:  112-block  0
call    0 never executed
        -:  113:  }
        -:  114:
        -:  115:private:
        -:  116:  using PlainAllocator =
        -:  117:    typename std::allocator_traits<Allocator>::template rebind_alloc<char>;
        -:  118:
        -:  119:  rcl_allocator_t
function _ZNK6rclcpp29PublisherOptionsWithAllocatorISaIvEE17get_rcl_allocatorEv called 2 returned 100% blocks executed 87%
        2:  120:  get_rcl_allocator() const
        -:  121:  {
        2:  122:    if (!plain_allocator_storage_) {
        2:  122-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
        2:  123:      plain_allocator_storage_ =
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  123-block  0
call    3 returned 2
call    4 returned 2
        4:  124:        std::make_shared<PlainAllocator>(*this->get_allocator());
        2:  124-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
    $$$$$:  124-block  1
call    3 never executed
        -:  125:    }
        2:  126:    return rclcpp::allocator::get_rcl_allocator<char>(*plain_allocator_storage_);
        2:  126-block  0
call    0 returned 2
call    1 returned 2
        -:  127:  }
        -:  128:
        -:  129:  // This is a temporal workaround, to make sure that get_allocator()
        -:  130:  // always returns a copy of the same allocator.
        -:  131:  mutable std::shared_ptr<Allocator> allocator_storage_;
        -:  132:
        -:  133:  // This is a temporal workaround, to keep the plain allocator that backs
        -:  134:  // up the rcl allocator returned in rcl_publisher_options_t alive.
        -:  135:  mutable std::shared_ptr<PlainAllocator> plain_allocator_storage_;
        -:  136:};
        -:  137:
        -:  138:using PublisherOptions = PublisherOptionsWithAllocator<std::allocator<void>>;
        -:  139:
        -:  140:}  // namespace rclcpp
        -:  141:
        -:  142:#endif  // RCLCPP__PUBLISHER_OPTIONS_HPP_
