        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/parameter.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2015 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__PARAMETER_HPP_
        -:   16:#define RCLCPP__PARAMETER_HPP_
        -:   17:
        -:   18:#include <iostream>
        -:   19:#include <ostream>
        -:   20:#include <sstream>
        -:   21:#include <string>
        -:   22:#include <vector>
        -:   23:
        -:   24:#include "rcl_interfaces/msg/parameter.hpp"
        -:   25:#include "rclcpp/exceptions.hpp"
        -:   26:#include "rclcpp/parameter_value.hpp"
        -:   27:#include "rclcpp/visibility_control.hpp"
        -:   28:
        -:   29:namespace rclcpp
        -:   30:{
        -:   31:
        -:   32:class Parameter;
        -:   33:
        -:   34:namespace node_interfaces
        -:   35:{
        -:   36:struct ParameterInfo;
        -:   37:}  // namespace node_interfaces
        -:   38:
        -:   39:namespace detail
        -:   40:{
        -:   41:
        -:   42:// This helper function is required because you cannot do specialization on a
        -:   43:// class method, so instead we specialize this template function and call it
        -:   44:// from the unspecialized, but dependent, class method.
        -:   45:template<typename T>
        -:   46:auto
        -:   47:get_value_helper(const rclcpp::Parameter * parameter);
        -:   48:
        -:   49:}  // namespace detail
        -:   50:
        -:   51:/// Structure to store an arbitrary parameter with templated get/set methods.
        -:   52:class Parameter
        -:   53:{
        -:   54:public:
        -:   55:  /// Construct with an empty name and a parameter value of type rclcpp::PARAMETER_NOT_SET.
        -:   56:  RCLCPP_PUBLIC
        -:   57:  Parameter();
        -:   58:
        -:   59:  /// Construct with given name and a parameter value of type rclcpp::PARAMETER_NOT_SET.
        -:   60:  RCLCPP_PUBLIC
        -:   61:  explicit Parameter(const std::string & name);
        -:   62:
        -:   63:  /// Construct with given name and given parameter value.
        -:   64:  RCLCPP_PUBLIC
        -:   65:  Parameter(const std::string & name, const ParameterValue & value);
        -:   66:
        -:   67:  /// Construct with given name and given parameter value.
        -:   68:  template<typename ValueTypeT>
        -:   69:  Parameter(const std::string & name, ValueTypeT value)
        -:   70:  : Parameter(name, ParameterValue(value))
        -:   71:  {}
        -:   72:
        -:   73:  RCLCPP_PUBLIC
        -:   74:  explicit Parameter(const rclcpp::node_interfaces::ParameterInfo & parameter_info);
        -:   75:
        -:   76:  /// Equal operator.
        -:   77:  RCLCPP_PUBLIC
        -:   78:  bool
        -:   79:  operator==(const Parameter & rhs) const;
        -:   80:
        -:   81:  /// Not equal operator.
        -:   82:  RCLCPP_PUBLIC
        -:   83:  bool
        -:   84:  operator!=(const Parameter & rhs) const;
        -:   85:
        -:   86:  /// Get the type of the parameter
        -:   87:  RCLCPP_PUBLIC
        -:   88:  ParameterType
        -:   89:  get_type() const;
        -:   90:
        -:   91:  /// Get the type name of the parameter
        -:   92:  RCLCPP_PUBLIC
        -:   93:  std::string
        -:   94:  get_type_name() const;
        -:   95:
        -:   96:  /// Get the name of the parameter
        -:   97:  RCLCPP_PUBLIC
        -:   98:  const std::string &
        -:   99:  get_name() const;
        -:  100:
        -:  101:  /// Get value of parameter as a parameter message.
        -:  102:  RCLCPP_PUBLIC
        -:  103:  rcl_interfaces::msg::ParameterValue
        -:  104:  get_value_message() const;
        -:  105:
        -:  106:  /// Get the internal storage for the parameter value.
        -:  107:  RCLCPP_PUBLIC
        -:  108:  const rclcpp::ParameterValue &
        -:  109:  get_parameter_value() const;
        -:  110:
        -:  111:  /// Get value of parameter using rclcpp::ParameterType as template argument.
        -:  112:  /**
        -:  113:   * \throws rclcpp::exceptions::InvalidParameterTypeException if the type doesn't match
        -:  114:   */
        -:  115:  template<ParameterType ParamT>
        -:  116:  decltype(auto)
        -:  117:  get_value() const
        -:  118:  {
        -:  119:    return value_.get<ParamT>();
        -:  120:  }
        -:  121:
        -:  122:  /// Get value of parameter using c++ types as template argument.
        -:  123:  template<typename T>
        -:  124:  decltype(auto)
        -:  125:  get_value() const;
        -:  126:
        -:  127:  /// Get value of parameter as boolean.
        -:  128:  /**
        -:  129:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  130:   */
        -:  131:  RCLCPP_PUBLIC
        -:  132:  bool
        -:  133:  as_bool() const;
        -:  134:
        -:  135:  /// Get value of parameter as integer.
        -:  136:  /**
        -:  137:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  138:   */
        -:  139:  RCLCPP_PUBLIC
        -:  140:  int64_t
        -:  141:  as_int() const;
        -:  142:
        -:  143:  /// Get value of parameter as double.
        -:  144:  /**
        -:  145:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  146:   */
        -:  147:  RCLCPP_PUBLIC
        -:  148:  double
        -:  149:  as_double() const;
        -:  150:
        -:  151:  /// Get value of parameter as string.
        -:  152:  /**
        -:  153:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  154:   */
        -:  155:  RCLCPP_PUBLIC
        -:  156:  const std::string &
        -:  157:  as_string() const;
        -:  158:
        -:  159:  /// Get value of parameter as byte array (vector<uint8_t>).
        -:  160:  /**
        -:  161:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  162:   */
        -:  163:  RCLCPP_PUBLIC
        -:  164:  const std::vector<uint8_t> &
        -:  165:  as_byte_array() const;
        -:  166:
        -:  167:  /// Get value of parameter as bool array (vector<bool>).
        -:  168:  /**
        -:  169:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  170:   */
        -:  171:  RCLCPP_PUBLIC
        -:  172:  const std::vector<bool> &
        -:  173:  as_bool_array() const;
        -:  174:
        -:  175:  /// Get value of parameter as integer array (vector<int64_t>).
        -:  176:  /**
        -:  177:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  178:   */
        -:  179:  RCLCPP_PUBLIC
        -:  180:  const std::vector<int64_t> &
        -:  181:  as_integer_array() const;
        -:  182:
        -:  183:  /// Get value of parameter as double array (vector<double>).
        -:  184:  /**
        -:  185:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  186:   */
        -:  187:  RCLCPP_PUBLIC
        -:  188:  const std::vector<double> &
        -:  189:  as_double_array() const;
        -:  190:
        -:  191:  /// Get value of parameter as string array (vector<std::string>).
        -:  192:  /**
        -:  193:   * \throws rclcpp::ParameterTypeException if the type doesn't match
        -:  194:   */
        -:  195:  RCLCPP_PUBLIC
        -:  196:  const std::vector<std::string> &
        -:  197:  as_string_array() const;
        -:  198:
        -:  199:  /// Convert a parameter message in a Parameter class object.
        -:  200:  RCLCPP_PUBLIC
        -:  201:  static Parameter
        -:  202:  from_parameter_msg(const rcl_interfaces::msg::Parameter & parameter);
        -:  203:
        -:  204:  /// Convert the class in a parameter message.
        -:  205:  RCLCPP_PUBLIC
        -:  206:  rcl_interfaces::msg::Parameter
        -:  207:  to_parameter_msg() const;
        -:  208:
        -:  209:  /// Get value of parameter as a string.
        -:  210:  RCLCPP_PUBLIC
        -:  211:  std::string
        -:  212:  value_to_string() const;
        -:  213:
        -:  214:private:
        -:  215:  std::string name_;
        -:  216:  ParameterValue value_;
        -:  217:};
        -:  218:
        -:  219:/// Return a json encoded version of the parameter intended for a dict.
        -:  220:RCLCPP_PUBLIC
        -:  221:std::string
        -:  222:_to_json_dict_entry(const Parameter & param);
        -:  223:
        -:  224:RCLCPP_PUBLIC
        -:  225:std::ostream &
        -:  226:operator<<(std::ostream & os, const rclcpp::Parameter & pv);
        -:  227:
        -:  228:RCLCPP_PUBLIC
        -:  229:std::ostream &
        -:  230:operator<<(std::ostream & os, const std::vector<Parameter> & parameters);
        -:  231:
        -:  232:namespace detail
        -:  233:{
        -:  234:
        -:  235:template<typename T>
        -:  236:auto
function _ZN6rclcpp6detail16get_value_helperISt6vectorIdSaIdEEEEDaPKNS_9ParameterE called 2 returned 100% blocks executed 100%
        2:  237:get_value_helper(const rclcpp::Parameter * parameter)
        -:  238:{
        2:  239:  return parameter->get_parameter_value().get<T>();
        2:  239-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
        -:  240:}
        -:  241:
        -:  242:// Specialization allowing Parameter::get() to return a const ref to the parameter value object.
        -:  243:template<>
        -:  244:inline
        -:  245:auto
        -:  246:get_value_helper<rclcpp::ParameterValue>(const rclcpp::Parameter * parameter)
        -:  247:{
        -:  248:  return parameter->get_parameter_value();
        -:  249:}
        -:  250:
        -:  251:// Specialization allowing Parameter::get() to return a const ref to the parameter itself.
        -:  252:template<>
        -:  253:inline
        -:  254:auto
        -:  255:get_value_helper<rclcpp::Parameter>(const rclcpp::Parameter * parameter)
        -:  256:{
        -:  257:  // Use this lambda to ensure it's a const reference being returned (and not a copy).
        -:  258:  auto type_enforcing_lambda =
        -:  259:    [&parameter]() -> const rclcpp::Parameter & {
        -:  260:      return *parameter;
        -:  261:    };
        -:  262:  return type_enforcing_lambda();
        -:  263:}
        -:  264:
        -:  265:}  // namespace detail
        -:  266:
        -:  267:/// \cond
        -:  268:template<typename T>
        -:  269:decltype(auto)
function _ZNK6rclcpp9Parameter9get_valueISt6vectorIdSaIdEEEEDcv called 2 returned 100% blocks executed 17%
        2:  270:Parameter::get_value() const
        -:  271:{
        -:  272:  try {
        -:  273:    // use the helper to specialize for the ParameterValue and Parameter cases.
        4:  274:    return detail::get_value_helper<T>(this);
        2:  274-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  274-block  1
    =====:  275:  } catch (const ParameterTypeException & ex) {
    $$$$$:  275-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  275-block  1
call    2 never executed
    $$$$$:  275-block  2
call    3 never executed
    =====:  276:    throw exceptions::InvalidParameterTypeException(this->name_, ex.what());
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    $$$$$:  276-block  0
call    6 never executed
branch  7 never executed
branch  8 never executed
    $$$$$:  276-block  1
call    9 never executed
call   10 never executed
call   11 never executed
    $$$$$:  276-block  2
call   12 never executed
    $$$$$:  276-block  3
    $$$$$:  276-block  4
call   13 never executed
    $$$$$:  276-block  5
    $$$$$:  276-block  6
call   14 never executed
        -:  277:  }
        -:  278:}
        -:  279:/// \endcond
        -:  280:
        -:  281:}  // namespace rclcpp
        -:  282:
        -:  283:namespace std
        -:  284:{
        -:  285:
        -:  286:/// Return a json encoded version of the parameter intended for a list.
        -:  287:RCLCPP_PUBLIC
        -:  288:std::string
        -:  289:to_string(const rclcpp::Parameter & param);
        -:  290:
        -:  291:/// Return a json encoded version of a vector of parameters, as a string.
        -:  292:RCLCPP_PUBLIC
        -:  293:std::string
        -:  294:to_string(const std::vector<rclcpp::Parameter> & parameters);
        -:  295:
        -:  296:}  // namespace std
        -:  297:
        -:  298:#endif  // RCLCPP__PARAMETER_HPP_
