        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/allocator/allocator_common.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2015 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__ALLOCATOR__ALLOCATOR_COMMON_HPP_
        -:   16:#define RCLCPP__ALLOCATOR__ALLOCATOR_COMMON_HPP_
        -:   17:
        -:   18:#include <cstring>
        -:   19:#include <memory>
        -:   20:
        -:   21:#include "rcl/allocator.h"
        -:   22:
        -:   23:#include "rclcpp/allocator/allocator_deleter.hpp"
        -:   24:
        -:   25:namespace rclcpp
        -:   26:{
        -:   27:namespace allocator
        -:   28:{
        -:   29:
        -:   30:template<typename T, typename Alloc>
        -:   31:using AllocRebind = typename std::allocator_traits<Alloc>::template rebind_traits<T>;
        -:   32:
        -:   33:template<typename Alloc>
function _ZN6rclcpp9allocator16retyped_allocateISaIcEEEPvmS3_ called 15 returned 100% blocks executed 56%
       15:   34:void * retyped_allocate(size_t size, void * untyped_allocator)
        -:   35:{
       15:   36:  auto typed_allocator = static_cast<Alloc *>(untyped_allocator);
       15:   37:  if (!typed_allocator) {
       15:   37-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 15
    #####:   38:    throw std::runtime_error("Received incorrect allocator type");
    %%%%%:   38-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   38-block  1
call    4 never executed
    $$$$$:   38-block  2
call    5 never executed
        -:   39:  }
       15:   40:  return std::allocator_traits<Alloc>::allocate(*typed_allocator, size);
       15:   40-block  0
call    0 returned 15
       15:   40-block  1
        -:   41:}
        -:   42:
        -:   43:template<typename Alloc>
function _ZN6rclcpp9allocator21retyped_zero_allocateISaIcEEEPvmmS3_ called 1 returned 100% blocks executed 64%
        1:   44:void * retyped_zero_allocate(size_t number_of_elem, size_t size_of_elem, void * untyped_allocator)
        -:   45:{
        1:   46:  auto typed_allocator = static_cast<Alloc *>(untyped_allocator);
        1:   47:  if (!typed_allocator) {
        1:   47-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:   48:    throw std::runtime_error("Received incorrect allocator type");
    %%%%%:   48-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   48-block  1
call    4 never executed
    $$$$$:   48-block  2
call    5 never executed
        -:   49:  }
        1:   50:  size_t size = number_of_elem * size_of_elem;
        -:   51:  void * allocated_memory =
        1:   52:    std::allocator_traits<Alloc>::allocate(*typed_allocator, size);
        1:   52-block  0
call    0 returned 1
        1:   53:  if (allocated_memory) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   54:    std::memset(allocated_memory, 0, size);
        1:   54-block  0
        -:   55:  }
        1:   56:  return allocated_memory;
        1:   56-block  0
        1:   56-block  1
        -:   57:}
        -:   58:
        -:   59:template<typename T, typename Alloc>
function _ZN6rclcpp9allocator18retyped_deallocateIcSaIcEEEvPvS3_ called 24 returned 100% blocks executed 50%
       24:   60:void retyped_deallocate(void * untyped_pointer, void * untyped_allocator)
        -:   61:{
       24:   62:  auto typed_allocator = static_cast<Alloc *>(untyped_allocator);
       24:   63:  if (!typed_allocator) {
       24:   63-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 24
    #####:   64:    throw std::runtime_error("Received incorrect allocator type");
    %%%%%:   64-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   64-block  1
call    4 never executed
    $$$$$:   64-block  2
call    5 never executed
        -:   65:  }
       24:   66:  auto typed_ptr = static_cast<T *>(untyped_pointer);
       24:   67:  std::allocator_traits<Alloc>::deallocate(*typed_allocator, typed_ptr, 1);
       24:   67-block  0
call    0 returned 24
       24:   68:}
        -:   69:
        -:   70:template<typename T, typename Alloc>
function _ZN6rclcpp9allocator18retyped_reallocateIcSaIcEEEPvS3_mS3_ called 0 returned 0% blocks executed 0%
    #####:   71:void * retyped_reallocate(void * untyped_pointer, size_t size, void * untyped_allocator)
        -:   72:{
    #####:   73:  auto typed_allocator = static_cast<Alloc *>(untyped_allocator);
    #####:   74:  if (!typed_allocator) {
    %%%%%:   74-block  0
branch  0 never executed
branch  1 never executed
    #####:   75:    throw std::runtime_error("Received incorrect allocator type");
    %%%%%:   75-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   75-block  1
call    4 never executed
    $$$$$:   75-block  2
call    5 never executed
        -:   76:  }
    #####:   77:  auto typed_ptr = static_cast<T *>(untyped_pointer);
    #####:   78:  std::allocator_traits<Alloc>::deallocate(*typed_allocator, typed_ptr, 1);
    %%%%%:   78-block  0
call    0 never executed
    #####:   79:  return std::allocator_traits<Alloc>::allocate(*typed_allocator, size);
call    0 never executed
    %%%%%:   79-block  0
        -:   80:}
        -:   81:
        -:   82:
        -:   83:// Convert a std::allocator_traits-formatted Allocator into an rcl allocator
        -:   84:template<
        -:   85:  typename T,
        -:   86:  typename Alloc,
        -:   87:  typename std::enable_if<!std::is_same<Alloc, std::allocator<void>>::value>::type * = nullptr>
function _ZN6rclcpp9allocator17get_rcl_allocatorIcSaIcELPv0EEE19rcutils_allocator_sRT0_ called 2 returned 100% blocks executed 100%
        2:   88:rcl_allocator_t get_rcl_allocator(Alloc & allocator)
        -:   89:{
        2:   90:  rcl_allocator_t rcl_allocator = rcl_get_default_allocator();
        2:   90-block  0
call    0 returned 2
        -:   91:#ifndef _WIN32
        2:   92:  rcl_allocator.allocate = &retyped_allocate<Alloc>;
        2:   93:  rcl_allocator.zero_allocate = &retyped_zero_allocate<Alloc>;
        2:   94:  rcl_allocator.deallocate = &retyped_deallocate<T, Alloc>;
        2:   95:  rcl_allocator.reallocate = &retyped_reallocate<T, Alloc>;
        2:   96:  rcl_allocator.state = &allocator;
        -:   97:#else
        -:   98:  (void)allocator;  // Remove warning
        -:   99:#endif
        2:  100:  return rcl_allocator;
        -:  101:}
        -:  102:
        -:  103:// TODO(jacquelinekay) Workaround for an incomplete implementation of std::allocator<void>
        -:  104:template<
        -:  105:  typename T,
        -:  106:  typename Alloc,
        -:  107:  typename std::enable_if<std::is_same<Alloc, std::allocator<void>>::value>::type * = nullptr>
        -:  108:rcl_allocator_t get_rcl_allocator(Alloc & allocator)
        -:  109:{
        -:  110:  (void)allocator;
        -:  111:  return rcl_get_default_allocator();
        -:  112:}
        -:  113:
        -:  114:}  // namespace allocator
        -:  115:}  // namespace rclcpp
        -:  116:
        -:  117:#endif  // RCLCPP__ALLOCATOR__ALLOCATOR_COMMON_HPP_
