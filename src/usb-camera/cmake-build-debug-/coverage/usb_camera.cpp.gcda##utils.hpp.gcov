        -:    0:Source:/opt/ros/humble/include/tracetools/tracetools/utils.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2019 Robert Bosch GmbH
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef TRACETOOLS__UTILS_HPP_
        -:   16:#define TRACETOOLS__UTILS_HPP_
        -:   17:
        -:   18:#include <stddef.h>
        -:   19:#include <functional>
        -:   20:
        -:   21:#include "tracetools/config.h"
        -:   22:
        -:   23:/// Default symbol, used when address resolution fails.
        -:   24:#define TRACETOOLS_SYMBOL_UNKNOWN "UNKNOWN"
        -:   25:
        -:   26:#ifndef TRACETOOLS_DISABLED
        -:   27:
        -:   28:namespace tracetools
        -:   29:{
        -:   30:
        -:   31:namespace detail
        -:   32:{
        -:   33:
        -:   34:/// Demangle symbol string.
        -:   35:/**
        -:   36: * Internal function.
        -:   37: */
        -:   38:const char * demangle_symbol(const char * mangled);
        -:   39:
        -:   40:/// Get symbol string from function pointer.
        -:   41:/**
        -:   42: * Internal function.
        -:   43: */
        -:   44:const char * get_symbol_funcptr(void * funcptr);
        -:   45:
        -:   46:}  // namespace detail
        -:   47:
        -:   48:/// Get symbol from an std::function object.
        -:   49:/**
        -:   50: * If function address resolution or symbol demangling fails,
        -:   51: * this will return a string that starts with \ref TRACETOOLS_SYMBOL_UNKNOWN.
        -:   52: *
        -:   53: * \param[in] f the std::function object
        -:   54: * \return the symbol, or a placeholder
        -:   55: */
        -:   56:template<typename T, typename ... U>
        -:   57:const char * get_symbol(std::function<T(U...)> f)
        -:   58:{
        -:   59:  typedef T (fnType)(U...);
        -:   60:  fnType ** fnPointer = f.template target<fnType *>();
        -:   61:  // If we get an actual address
        -:   62:  if (fnPointer != nullptr) {
        -:   63:    void * funcptr = reinterpret_cast<void *>(*fnPointer);
        -:   64:    return detail::get_symbol_funcptr(funcptr);
        -:   65:  }
        -:   66:  // Otherwise we have to go through target_type()
        -:   67:  return detail::demangle_symbol(f.target_type().name());
        -:   68:}
        -:   69:
        -:   70:/// Get symbol from a function-related object.
        -:   71:/**
        -:   72: * Fallback meant for lambdas with captures.
        -:   73: *
        -:   74: * \param[in] l a generic object
        -:   75: * \return the symbol
        -:   76: */
        -:   77:template<typename L>
function _ZN10tracetools10get_symbolIRSt5_BindIFM10usb_cameraFvvEPS2_EEEEPKcOT_ called 1 returned 100% blocks executed 100%
        1:   78:const char * get_symbol(L && l)
        -:   79:{
        1:   80:  return detail::demangle_symbol(typeid(l).name());
        1:   80-block  0
call    0 returned 1
call    1 returned 1
        -:   81:}
        -:   82:
        -:   83:}  // namespace tracetools
        -:   84:
        -:   85:#endif  // TRACETOOLS_DISABLED
        -:   86:
        -:   87:#endif  // TRACETOOLS__UTILS_HPP_
