        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/detail/resolve_use_intra_process.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2019 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__DETAIL__RESOLVE_USE_INTRA_PROCESS_HPP_
        -:   16:#define RCLCPP__DETAIL__RESOLVE_USE_INTRA_PROCESS_HPP_
        -:   17:
        -:   18:#include <stdexcept>
        -:   19:
        -:   20:#include "rclcpp/intra_process_setting.hpp"
        -:   21:
        -:   22:namespace rclcpp
        -:   23:{
        -:   24:
        -:   25:namespace detail
        -:   26:{
        -:   27:
        -:   28:/// Return whether or not intra process is enabled, resolving "NodeDefault" if needed.
        -:   29:template<typename OptionsT, typename NodeBaseT>
        -:   30:bool
function _ZN6rclcpp6detail25resolve_use_intra_processINS_29PublisherOptionsWithAllocatorISaIvEEENS_15node_interfaces17NodeBaseInterfaceEEEbRKT_RKT0_ called 2 returned 100% blocks executed 50%
        2:   31:resolve_use_intra_process(const OptionsT & options, const NodeBaseT & node_base)
        -:   32:{
        -:   33:  bool use_intra_process;
        2:   34:  switch (options.use_intra_process_comm) {
        2:   34-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 2
branch  3 taken 0
    #####:   35:    case IntraProcessSetting::Enable:
    #####:   36:      use_intra_process = true;
    #####:   37:      break;
    %%%%%:   37-block  0
    #####:   38:    case IntraProcessSetting::Disable:
    #####:   39:      use_intra_process = false;
    #####:   40:      break;
    %%%%%:   40-block  0
        2:   41:    case IntraProcessSetting::NodeDefault:
        2:   42:      use_intra_process = node_base.get_use_intra_process_default();
        2:   42-block  0
call    0 returned 2
        2:   43:      break;
    #####:   44:    default:
    #####:   45:      throw std::runtime_error("Unrecognized IntraProcessSetting value");
    %%%%%:   45-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    %%%%%:   45-block  1
call    4 never executed
    $$$$$:   45-block  2
call    5 never executed
        -:   46:      break;
        -:   47:  }
        -:   48:
        2:   49:  return use_intra_process;
        2:   49-block  0
        2:   49-block  1
        -:   50:}
        -:   51:
        -:   52:}  // namespace detail
        -:   53:
        -:   54:}  // namespace rclcpp
        -:   55:
        -:   56:#endif  // RCLCPP__DETAIL__RESOLVE_USE_INTRA_PROCESS_HPP_
