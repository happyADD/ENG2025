        -:    0:Source:/opt/ros/humble/include/rclcpp/rclcpp/create_publisher.hpp
        -:    0:Graph:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcno
        -:    0:Data:/home/dcy/ENG/ENG2025/src/usb-camera/cmake-build-debug-/CMakeFiles/usb_camera.dir/src/usb_camera.cpp.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2016 Open Source Robotics Foundation, Inc.
        -:    2://
        -:    3:// Licensed under the Apache License, Version 2.0 (the "License");
        -:    4:// you may not use this file except in compliance with the License.
        -:    5:// You may obtain a copy of the License at
        -:    6://
        -:    7://     http://www.apache.org/licenses/LICENSE-2.0
        -:    8://
        -:    9:// Unless required by applicable law or agreed to in writing, software
        -:   10:// distributed under the License is distributed on an "AS IS" BASIS,
        -:   11:// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        -:   12:// See the License for the specific language governing permissions and
        -:   13:// limitations under the License.
        -:   14:
        -:   15:#ifndef RCLCPP__CREATE_PUBLISHER_HPP_
        -:   16:#define RCLCPP__CREATE_PUBLISHER_HPP_
        -:   17:
        -:   18:#include <memory>
        -:   19:#include <string>
        -:   20:#include <utility>
        -:   21:
        -:   22:#include "rclcpp/node_interfaces/get_node_topics_interface.hpp"
        -:   23:#include "rclcpp/node_interfaces/node_topics_interface.hpp"
        -:   24:#include "rclcpp/node_options.hpp"
        -:   25:#include "rclcpp/publisher_factory.hpp"
        -:   26:#include "rclcpp/publisher_options.hpp"
        -:   27:#include "rclcpp/qos.hpp"
        -:   28:#include "rclcpp/qos_overriding_options.hpp"
        -:   29:#include "rclcpp/detail/qos_parameters.hpp"
        -:   30:
        -:   31:#include "rmw/qos_profiles.h"
        -:   32:
        -:   33:namespace rclcpp
        -:   34:{
        -:   35:
        -:   36:namespace detail
        -:   37:{
        -:   38:/// Create and return a publisher of the given MessageT type.
        -:   39:template<
        -:   40:  typename MessageT,
        -:   41:  typename AllocatorT = std::allocator<void>,
        -:   42:  typename PublisherT = rclcpp::Publisher<MessageT, AllocatorT>,
        -:   43:  typename NodeParametersT,
        -:   44:  typename NodeTopicsT>
        -:   45:std::shared_ptr<PublisherT>
        2:   46:create_publisher(
        -:   47:  NodeParametersT & node_parameters,
        -:   48:  NodeTopicsT & node_topics,
        -:   49:  const std::string & topic_name,
        -:   50:  const rclcpp::QoS & qos,
        -:   51:  const rclcpp::PublisherOptionsWithAllocator<AllocatorT> & options = (
        -:   52:    rclcpp::PublisherOptionsWithAllocator<AllocatorT>()
        -:   53:  )
        -:   54:)
        -:   55:{
        2:   56:  auto node_topics_interface = rclcpp::node_interfaces::get_node_topics_interface(node_topics);
       2*:   57:  const rclcpp::QoS & actual_qos = options.qos_overriding_options.get_policy_kinds().size() ?
       2*:   58:    rclcpp::detail::declare_qos_parameters(
    #####:   59:    options.qos_overriding_options, node_parameters,
    #####:   60:    node_topics_interface->resolve_topic_name(topic_name),
        -:   61:    qos, rclcpp::detail::PublisherQosParametersTraits{}) :
        -:   62:    qos;
        -:   63:
        -:   64:  // Create the publisher.
        2:   65:  auto pub = node_topics_interface->create_publisher(
        -:   66:    topic_name,
        -:   67:    rclcpp::create_publisher_factory<MessageT, AllocatorT, PublisherT>(options),
        -:   68:    actual_qos
        -:   69:  );
        -:   70:
        -:   71:  // Add the publisher to the node topics interface.
        2:   72:  node_topics_interface->add_publisher(pub, options.callback_group);
        -:   73:
        4:   74:  return std::dynamic_pointer_cast<PublisherT>(pub);
        2:   75:}
------------------
_ZN6rclcpp6detail16create_publisherIN11sensor_msgs3msg11CameraInfo_ISaIvEEES5_NS_9PublisherIS6_S5_EENS_4NodeES9_EESt10shared_ptrIT1_ERT2_RT3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_3QoSERKNS_29PublisherOptionsWithAllocatorIT0_EE:
function _ZN6rclcpp6detail16create_publisherIN11sensor_msgs3msg11CameraInfo_ISaIvEEES5_NS_9PublisherIS6_S5_EENS_4NodeES9_EESt10shared_ptrIT1_ERT2_RT3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_3QoSERKNS_29PublisherOptionsWithAllocatorIT0_EE called 1 returned 100% blocks executed 51%
        1:   46:create_publisher(
        -:   47:  NodeParametersT & node_parameters,
        -:   48:  NodeTopicsT & node_topics,
        -:   49:  const std::string & topic_name,
        -:   50:  const rclcpp::QoS & qos,
        -:   51:  const rclcpp::PublisherOptionsWithAllocator<AllocatorT> & options = (
        -:   52:    rclcpp::PublisherOptionsWithAllocator<AllocatorT>()
        -:   53:  )
        -:   54:)
        -:   55:{
        1:   56:  auto node_topics_interface = rclcpp::node_interfaces::get_node_topics_interface(node_topics);
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   57:  const rclcpp::QoS & actual_qos = options.qos_overriding_options.get_policy_kinds().size() ?
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        1:   57-block  2
       1*:   58:    rclcpp::detail::declare_qos_parameters(
        1:   58-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  1
call    2 never executed
    $$$$$:   58-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:   58-block  3
call    5 never executed
    $$$$$:   58-block  4
    #####:   59:    options.qos_overriding_options, node_parameters,
    %%%%%:   59-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    node_topics_interface->resolve_topic_name(topic_name),
    %%%%%:   60-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   61:    qos, rclcpp::detail::PublisherQosParametersTraits{}) :
        -:   62:    qos;
        -:   63:
        -:   64:  // Create the publisher.
        1:   65:  auto pub = node_topics_interface->create_publisher(
        1:   65-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   65-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:   65-block  2
        -:   66:    topic_name,
        -:   67:    rclcpp::create_publisher_factory<MessageT, AllocatorT, PublisherT>(options),
        -:   68:    actual_qos
        -:   69:  );
        -:   70:
        -:   71:  // Add the publisher to the node topics interface.
        1:   72:  node_topics_interface->add_publisher(pub, options.callback_group);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   72-block  0
call    6 returned 1
call    7 returned 1
    $$$$$:   72-block  1
call    8 never executed
    $$$$$:   72-block  2
    $$$$$:   72-block  3
call    9 never executed
    $$$$$:   72-block  4
        -:   73:
        2:   74:  return std::dynamic_pointer_cast<PublisherT>(pub);
call    0 returned 1
        1:   74-block  0
        1:   75:}
call    0 returned 1
call    1 returned 1
    $$$$$:   75-block  0
call    2 never executed
    $$$$$:   75-block  1
call    3 never executed
------------------
_ZN6rclcpp6detail16create_publisherIN11sensor_msgs3msg6Image_ISaIvEEES5_NS_9PublisherIS6_S5_EENS_4NodeES9_EESt10shared_ptrIT1_ERT2_RT3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_3QoSERKNS_29PublisherOptionsWithAllocatorIT0_EE:
function _ZN6rclcpp6detail16create_publisherIN11sensor_msgs3msg6Image_ISaIvEEES5_NS_9PublisherIS6_S5_EENS_4NodeES9_EESt10shared_ptrIT1_ERT2_RT3_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_3QoSERKNS_29PublisherOptionsWithAllocatorIT0_EE called 1 returned 100% blocks executed 51%
        1:   46:create_publisher(
        -:   47:  NodeParametersT & node_parameters,
        -:   48:  NodeTopicsT & node_topics,
        -:   49:  const std::string & topic_name,
        -:   50:  const rclcpp::QoS & qos,
        -:   51:  const rclcpp::PublisherOptionsWithAllocator<AllocatorT> & options = (
        -:   52:    rclcpp::PublisherOptionsWithAllocator<AllocatorT>()
        -:   53:  )
        -:   54:)
        -:   55:{
        1:   56:  auto node_topics_interface = rclcpp::node_interfaces::get_node_topics_interface(node_topics);
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   57:  const rclcpp::QoS & actual_qos = options.qos_overriding_options.get_policy_kinds().size() ?
        1:   57-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57-block  1
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        1:   57-block  2
       1*:   58:    rclcpp::detail::declare_qos_parameters(
        1:   58-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:   58-block  1
call    2 never executed
    $$$$$:   58-block  2
branch  3 never executed
branch  4 never executed
    $$$$$:   58-block  3
call    5 never executed
    $$$$$:   58-block  4
    #####:   59:    options.qos_overriding_options, node_parameters,
    %%%%%:   59-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:    node_topics_interface->resolve_topic_name(topic_name),
    %%%%%:   60-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:   61:    qos, rclcpp::detail::PublisherQosParametersTraits{}) :
        -:   62:    qos;
        -:   63:
        -:   64:  // Create the publisher.
        1:   65:  auto pub = node_topics_interface->create_publisher(
        1:   65-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   65-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
    $$$$$:   65-block  2
        -:   66:    topic_name,
        -:   67:    rclcpp::create_publisher_factory<MessageT, AllocatorT, PublisherT>(options),
        -:   68:    actual_qos
        -:   69:  );
        -:   70:
        -:   71:  // Add the publisher to the node topics interface.
        1:   72:  node_topics_interface->add_publisher(pub, options.callback_group);
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   72-block  0
call    6 returned 1
call    7 returned 1
    $$$$$:   72-block  1
call    8 never executed
    $$$$$:   72-block  2
    $$$$$:   72-block  3
call    9 never executed
    $$$$$:   72-block  4
        -:   73:
        2:   74:  return std::dynamic_pointer_cast<PublisherT>(pub);
call    0 returned 1
        1:   74-block  0
        1:   75:}
call    0 returned 1
call    1 returned 1
    $$$$$:   75-block  0
call    2 never executed
    $$$$$:   75-block  1
call    3 never executed
------------------
        -:   76:}  // namespace detail
        -:   77:
        -:   78:
        -:   79:/// Create and return a publisher of the given MessageT type.
        -:   80:/**
        -:   81: * The NodeT type only needs to have a method called get_node_topics_interface()
        -:   82: * which returns a shared_ptr to a NodeTopicsInterface.
        -:   83: *
        -:   84: * In case `options.qos_overriding_options` is enabling qos parameter overrides,
        -:   85: * NodeT must also have a method called get_node_parameters_interface()
        -:   86: * which returns a shared_ptr to a NodeParametersInterface.
        -:   87: */
        -:   88:template<
        -:   89:  typename MessageT,
        -:   90:  typename AllocatorT = std::allocator<void>,
        -:   91:  typename PublisherT = rclcpp::Publisher<MessageT, AllocatorT>,
        -:   92:  typename NodeT>
        -:   93:std::shared_ptr<PublisherT>
        2:   94:create_publisher(
        -:   95:  NodeT && node,
        -:   96:  const std::string & topic_name,
        -:   97:  const rclcpp::QoS & qos,
        -:   98:  const rclcpp::PublisherOptionsWithAllocator<AllocatorT> & options = (
        -:   99:    rclcpp::PublisherOptionsWithAllocator<AllocatorT>()
        -:  100:  )
        -:  101:)
        -:  102:{
        -:  103:  return detail::create_publisher<MessageT, AllocatorT, PublisherT>(
        2:  104:    node, node, topic_name, qos, options);
        -:  105:}
        -:  106:
        -:  107:/// Create and return a publisher of the given MessageT type.
        -:  108:template<
        -:  109:  typename MessageT,
        -:  110:  typename AllocatorT = std::allocator<void>,
        -:  111:  typename PublisherT = rclcpp::Publisher<MessageT, AllocatorT>>
        -:  112:std::shared_ptr<PublisherT>
        -:  113:create_publisher(
        -:  114:  rclcpp::node_interfaces::NodeParametersInterface::SharedPtr & node_parameters,
        -:  115:  rclcpp::node_interfaces::NodeTopicsInterface::SharedPtr & node_topics,
        -:  116:  const std::string & topic_name,
        -:  117:  const rclcpp::QoS & qos,
        -:  118:  const rclcpp::PublisherOptionsWithAllocator<AllocatorT> & options = (
        -:  119:    rclcpp::PublisherOptionsWithAllocator<AllocatorT>()
        -:  120:  )
        -:  121:)
        -:  122:{
        -:  123:  return detail::create_publisher<MessageT, AllocatorT, PublisherT>(
        -:  124:    node_parameters, node_topics, topic_name, qos, options);
        -:  125:}
        -:  126:
        -:  127:}  // namespace rclcpp
        -:  128:
        -:  129:#endif  // RCLCPP__CREATE_PUBLISHER_HPP_
